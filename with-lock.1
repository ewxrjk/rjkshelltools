.\" (c) 2014 Richard Kettlewell
.\"
.\" This program is free software: you can redistribute it and/or modify
.\" it under the terms of the GNU General Public License as published by
.\" the Free Software Foundation, either version 3 of the License, or
.\" (at your option) any later version.
.\"
.\" This program is distributed in the hope that it will be useful,
.\" but WITHOUT ANY WARRANTY; without even the implied warranty of
.\" MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
.\" GNU General Public License for more details.
.\"
.\" You should have received a copy of the GNU General Public License
.\" along with this program.  If not, see <http://www.gnu.org/licenses/>.
.TH with-lock 1
.SH NAME
with-lock \- run a command with a lock held
.SH SYNOPSIS
.B with-lock
.RI [ options ]
.B --
.I path
.IR command ...
.SH DESCRIPTION
.B with-lock
runs
.I command
with a 
.BR fcntl (2)-style
lock held on a file.  It takes the following options:
.TP
\fB-f N\fR, \fB--fd N\fR
Pass the lock file descriptor to the child using file descriptor
.I N
rather than whatever
.BR open (2)
returns.
.TP
\fB-e\fR, \fB--exclusive\fR
Take an exclusive lock.  The process will block until no other process
holds any kind of lock.  This is the default.
.TP
\fB-s\fR, \fB--shared\fR
Take a shared lock.  The process will block until no other process
holds an exclusive lock (but it will not be blocked by other shared
locks).
.TP
\fB-F\fR, \fB--fork\fR
Run the command in a subprocess instead of executing it directly.  If
you use this option then it does not matter if the subprocess closes
the lockfile or daemonizes: the parent will still hold the lock for
it.
.SH AUTHOR
Richard Kettlewell <rjk@greenend.org.uk>
